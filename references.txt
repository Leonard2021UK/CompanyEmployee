#Update db
dotnet ef -v database update -r linux-x64

#Create migration
dotnet ef -v migrations add DatabaseCreation

#Resolves 
#- System.PlatformNotSupportedException: Strings.PlatformNotSupported_DataSqlClient
dotnet run --arch x64 --os linux

#AWS CD/CI pipeline
https://catalog.us-east-1.prod.workshops.aws/workshops/02696107-09ac-4313-a6cb-3798048b07d7/en-US/10-how-to-set-up-my-cicd-pipeline/add-application-deployment-to-my-pipeline

#Jenkins in docker
https://www.jenkins.io/doc/book/installing/docker/

#look into a stopped image altering the entrypoint
docker run -ti --entrypoint=sh test_image
https://stackoverflow.com/questions/48833905/how-to-list-files-in-a-stopped-docker-container

#run the image
docker run -it --rm -p 8000:80 e9b

#rename image tag
#!/usr/bin/env bash
 if [ $# -eq 0 ]
   then
     tag='latest'
   else
     tag=$1
 fi
 
 docker build -t project:$tag .
 
 
 #run dind
 docker run --name jenkins-docker --rm --detach   --privileged --network jenkins --network-alias docker   --env DOCKER_TLS_CERTDIR=/certs   --volume jenkins-docker-certs:/certs/client   --volume jenkins-data:/var/jenkins_home   --publish 2376:2376   docker:dind --storage-driver overlay2


#To copy a file from the local file system to a container, run the command for Docker container or Kubernetes pod, respectively:
docker cp <src-path> <container>:<dest-path> 
kubectl cp <src-path> <your-pod-name>:<dest-path> 

#For example:
docker cp "C:\ProcDump\procdump64.exe" sitecore-xm1_cm_1:"C:\" 
kubectl cp "C:\ProcDump\procdump64.exe" k8s-xm-cm-pod:procdump64.exe

#To copy a file from the container to the local file system, use:
docker cp <container>:<src-path> <local-dest-path> 
kubectl cp <your-pod-name>:<src-path> <local-dest-path> 

#For example:
docker cp sitecore-xm1_cm_1:"C:\inetpub\wwwroot\App_Data\logs" "C:\" 
kubectl cp k8s-xm-cm-pod:some-file.txt "C:\"

#Building from custom docker file
docker build -f jenkins.Dockerfile -t myjenkins-blueocean:2.361.1-1 .


docker run --name jenkins-blueocean --restart=on-failure --detach --network jenkins --env DOCKER_HOST=tcp://docker:2376 --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 --volume jenkins-data:/var/jenkins_home --volume jenkins-docker-certs:/certs/client:ro --publish 8080:8080 --publish 50000:50000 myjenkins-blueocean:2.361.1-1

#deploy on remote iis
https://www.ahmetkucukoglu.com/en/how-to-publish-asp-net-core-application-by-using-jenkins

#event filtering using xml, create trigger
http://blogs.technet.com/b/askds/archive/2011/09/26/advanced-xml-filtering-in-the-windows-event-viewer.aspx

#service trigger
<QueryList> 
   <Query Id="0"> 
      <Select Path="System"> 
         *[EventData[Data[@Name='param1'] and (Data='YOUR SERVICE NAME')]] 
         and
         *[EventData[Data[@Name='param2'] and (Data='running')]] 
       </Select> 
   </Query> 
</QueryList>

#host dotnet app on remote iis server
https://learn.microsoft.com/en-us/aspnet/core/tutorials/publish-to-iis?view=aspnetcore-6.0&tabs=netcore-cli

#MSbuild parameters
https://stackoverflow.com/questions/5598668/valid-parameters-for-msdeploy-via-msbuild